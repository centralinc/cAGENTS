// Write CLAUDE.md output format

use anyhow::{Context, Result};
use std::fs;
use std::path::Path;

/// Write merged content to CLAUDE.md at the specified path
pub fn write_claude_md(output_dir: &Path, content: &str, is_root: bool) -> Result<()> {
    let output_path = output_dir.join("CLAUDE.md");

    // Prepend auto-update header
    let header = r#"<!--
This file is auto-generated by cAGENTS. Do not edit directly.

To update: run `cagents build`
For file-specific context: run `cagents context <filename>`
-->

"#;

    // Append cAGENTS best practices footer (only for root targets)
    let footer = if is_root {
        r#"

---

## Working with cAGENTS

This file was generated by cAGENTS. To work efficiently with this codebase:

1. **Run once at start of session**: `cagents build` ensures all agent rules are up-to-date
2. **Get file-specific context**: `cagents context <filename>` retrieves all relevant rules for a specific file - more efficient than reading this entire file
3. **Best practice**: Re-run `cagents build` when context seems stale or after pulling changes

Learn more: https://github.com/centralinc/cagents
"#
    } else {
        ""
    };

    let full_content = format!("{}{}{}", header, content, footer);

    fs::write(&output_path, full_content)
        .with_context(|| format!("Failed to write CLAUDE.md to {}", output_path.display()))?;

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;

    #[test]
    fn test_write_claude_md() {
        let temp_dir = TempDir::new().unwrap();
        let content = "# Claude Code Rules\n\nTest content.";

        write_claude_md(temp_dir.path(), content, true).unwrap();

        let written = fs::read_to_string(temp_dir.path().join("CLAUDE.md")).unwrap();

        // Should include auto-update header
        assert!(written.contains("cagents build"));
        assert!(written.contains("cagents context"));
        // Should include original content
        assert!(written.contains("# Claude Code Rules"));
        assert!(written.contains("Test content."));
        // Should include footer since is_root=true
        assert!(written.contains("Working with cAGENTS"));
    }
}
